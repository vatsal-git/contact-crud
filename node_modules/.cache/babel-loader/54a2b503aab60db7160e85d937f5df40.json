{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dell\\\\Desktop\\\\vatsal-patel\\\\contact-crud\\\\contact-crud\\\\src\\\\components\\\\FormModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Button, Figure, Form, Modal } from 'react-bootstrap';\nimport { validateEmail, validateName, validatePhone, validateProfile } from '../helper/HelperFunctions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction FormModal(_ref) {\n  _s();\n\n  let {\n    title,\n    buttonName,\n    btnClassName,\n    initialFormValues,\n    updateContacts,\n    contactIndex\n  } = _ref;\n  const [show, setShow] = useState(false);\n  const [form, setForm] = useState(initialFormValues);\n  const [doValid, setDoValid] = useState(false);\n  const error = document.getElementsByClassName('error');\n  useEffect(() => {\n    if (doValid) validate();\n  }, [form]);\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => {\n    setForm(initialFormValues);\n    setDoValid(false);\n    setShow(true);\n  };\n\n  let file;\n\n  const imageUpload = e => {\n    file = e.target.files[0];\n    error[0].textContent = validateProfile(file);\n    getBase64(file).then(base64 => {\n      setForm({ ...form,\n        profile: base64\n      });\n    });\n  };\n\n  const getBase64 = file => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = () => resolve(reader.result);\n\n      reader.onerror = error => reject(error);\n\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const onFormSubmit = e => {\n    e.preventDefault();\n    setDoValid(true);\n\n    if (validate()) {\n      const userContacts = JSON.parse(localStorage.getItem('userContacts'));\n\n      if (!userContacts) {\n        localStorage.setItem('userContacts', JSON.stringify([form]));\n      } else {\n        userContacts.splice(contactIndex, 1, form);\n        localStorage.setItem('userContacts', JSON.stringify(userContacts));\n        updateContacts();\n      }\n\n      updateContacts();\n      handleClose();\n    }\n  };\n\n  const validate = () => {\n    error[1].textContent = validateName(form.name);\n    error[2].textContent = validateEmail(form.email);\n    error[3].textContent = validatePhone(form.phone);\n    if (form.profile === '') error[0].textContent = '*No image';\n    return form.profile !== '' && error[1].textContent === '' && error[2].textContent === '' && error[3].textContent === '' ? true : false;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: btnClassName.wrapper,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        className: btnClassName.element,\n        variant: \"primary\",\n        onClick: handleShow,\n        children: buttonName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: show,\n      onHide: handleClose,\n      centered: true,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: onFormSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          closeButton: true,\n          children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n            children: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"formFile\",\n            className: \"mb-3\",\n            onChange: e => {\n              imageUpload(e);\n              if (doValid) validate();\n            },\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Profile\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"file\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"error\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Figure, {\n              className: \"profile-preview-wrapper\",\n              children: /*#__PURE__*/_jsxDEV(Figure.Image, {\n                width: 50,\n                height: 50,\n                alt: \"select a profile\",\n                src: form.profile,\n                className: \"profile-preview\",\n                thumbnail: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            controlId: \"formBasicName\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              placeholder: \"Enter Name\",\n              onChange: e => {\n                setForm({ ...form,\n                  name: e.target.value\n                });\n                if (doValid) validate();\n              },\n              value: form.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"error\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            controlId: \"formBasicEmail\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Email address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"email\",\n              placeholder: \"Enter email\",\n              onChange: e => {\n                setForm({ ...form,\n                  email: e.target.value\n                });\n                if (doValid) validate();\n              },\n              value: form.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"error\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            controlId: \"formBasicPhone\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Phone Number\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"tel\",\n              placeholder: \"Enter phone number\",\n              onChange: e => {\n                setForm({ ...form,\n                  phone: e.target.value\n                });\n                if (doValid) validate();\n              },\n              value: form.phone\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"error\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: handleClose,\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"primary\",\n            children: \"Save Changes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(FormModal, \"TOOTOI0h6CKB5qq6YKhJzWOvux0=\");\n\n_c = FormModal;\nexport default FormModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormModal\");","map":{"version":3,"sources":["C:/Users/dell/Desktop/vatsal-patel/contact-crud/contact-crud/src/components/FormModal.js"],"names":["React","useEffect","useState","Button","Figure","Form","Modal","validateEmail","validateName","validatePhone","validateProfile","FormModal","title","buttonName","btnClassName","initialFormValues","updateContacts","contactIndex","show","setShow","form","setForm","doValid","setDoValid","error","document","getElementsByClassName","validate","handleClose","handleShow","file","imageUpload","e","target","files","textContent","getBase64","then","base64","profile","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsDataURL","onFormSubmit","preventDefault","userContacts","JSON","parse","localStorage","getItem","setItem","stringify","splice","name","email","phone","wrapper","element","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { Button, Figure, Form, Modal } from 'react-bootstrap'\r\nimport {\r\n    validateEmail,\r\n    validateName,\r\n    validatePhone,\r\n    validateProfile,\r\n} from '../helper/HelperFunctions'\r\n\r\nfunction FormModal({\r\n    title,\r\n    buttonName,\r\n    btnClassName,\r\n    initialFormValues,\r\n    updateContacts,\r\n    contactIndex,\r\n}) {\r\n    const [show, setShow] = useState(false)\r\n    const [form, setForm] = useState(initialFormValues)\r\n    const [doValid, setDoValid] = useState(false)\r\n\r\n    const error = document.getElementsByClassName('error')\r\n    useEffect(() => {\r\n        if (doValid) validate()\r\n    }, [form])\r\n\r\n    const handleClose = () => setShow(false)\r\n    const handleShow = () => {\r\n        setForm(initialFormValues)\r\n        setDoValid(false)\r\n        setShow(true)\r\n    }\r\n\r\n    let file\r\n    const imageUpload = (e) => {\r\n        file = e.target.files[0]\r\n        error[0].textContent = validateProfile(file)\r\n        getBase64(file).then((base64) => {\r\n            setForm({ ...form, profile: base64 })\r\n        })\r\n    }\r\n    const getBase64 = (file) => {\r\n        return new Promise((resolve, reject) => {\r\n            const reader = new FileReader()\r\n            reader.onload = () => resolve(reader.result)\r\n            reader.onerror = (error) => reject(error)\r\n            reader.readAsDataURL(file)\r\n        })\r\n    }\r\n\r\n    const onFormSubmit = (e) => {\r\n        e.preventDefault()\r\n        setDoValid(true)\r\n        if (validate()) {\r\n            const userContacts = JSON.parse(\r\n                localStorage.getItem('userContacts')\r\n            )\r\n\r\n            if (!userContacts) {\r\n                localStorage.setItem('userContacts', JSON.stringify([form]))\r\n            } else {\r\n                userContacts.splice(contactIndex, 1, form)\r\n                localStorage.setItem(\r\n                    'userContacts',\r\n                    JSON.stringify(userContacts)\r\n                )\r\n                updateContacts()\r\n            }\r\n            updateContacts()\r\n            handleClose()\r\n        }\r\n    }\r\n\r\n    const validate = () => {\r\n        error[1].textContent = validateName(form.name)\r\n        error[2].textContent = validateEmail(form.email)\r\n        error[3].textContent = validatePhone(form.phone)\r\n        if (form.profile === '') error[0].textContent = '*No image'\r\n\r\n        return form.profile !== '' &&\r\n            error[1].textContent === '' &&\r\n            error[2].textContent === '' &&\r\n            error[3].textContent === ''\r\n            ? true\r\n            : false\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={btnClassName.wrapper}>\r\n                <Button\r\n                    className={btnClassName.element}\r\n                    variant=\"primary\"\r\n                    onClick={handleShow}\r\n                >\r\n                    {buttonName}\r\n                </Button>\r\n            </div>\r\n\r\n            <Modal show={show} onHide={handleClose} centered>\r\n                <Form onSubmit={onFormSubmit}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>{title}</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Form.Group\r\n                            controlId=\"formFile\"\r\n                            className=\"mb-3\"\r\n                            onChange={(e) => {\r\n                                imageUpload(e)\r\n                                if (doValid) validate()\r\n                            }}\r\n                        >\r\n                            <Form.Label>Profile</Form.Label>\r\n                            <Form.Control type=\"file\" />\r\n                            <p className=\"error\"></p>\r\n                            <Figure className=\"profile-preview-wrapper\">\r\n                                <Figure.Image\r\n                                    width={50}\r\n                                    height={50}\r\n                                    alt=\"select a profile\"\r\n                                    src={form.profile}\r\n                                    className=\"profile-preview\"\r\n                                    thumbnail\r\n                                />\r\n                            </Figure>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"mb-3\" controlId=\"formBasicName\">\r\n                            <Form.Label>Name</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                placeholder=\"Enter Name\"\r\n                                onChange={(e) => {\r\n                                    setForm({\r\n                                        ...form,\r\n                                        name: e.target.value,\r\n                                    })\r\n                                    if (doValid) validate()\r\n                                }}\r\n                                value={form.name}\r\n                            />\r\n                            <p className=\"error\"></p>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                            <Form.Label>Email address</Form.Label>\r\n                            <Form.Control\r\n                                type=\"email\"\r\n                                placeholder=\"Enter email\"\r\n                                onChange={(e) => {\r\n                                    setForm({\r\n                                        ...form,\r\n                                        email: e.target.value,\r\n                                    })\r\n                                    if (doValid) validate()\r\n                                }}\r\n                                value={form.email}\r\n                            />\r\n                            <p className=\"error\"></p>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"mb-3\" controlId=\"formBasicPhone\">\r\n                            <Form.Label>Phone Number</Form.Label>\r\n                            <Form.Control\r\n                                type=\"tel\"\r\n                                placeholder=\"Enter phone number\"\r\n                                onChange={(e) => {\r\n                                    setForm({\r\n                                        ...form,\r\n                                        phone: e.target.value,\r\n                                    })\r\n                                    if (doValid) validate()\r\n                                }}\r\n                                value={form.phone}\r\n                            />\r\n                            <p className=\"error\"></p>\r\n                        </Form.Group>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose}>\r\n                            Close\r\n                        </Button>\r\n                        <Button type=\"submit\" variant=\"primary\">\r\n                            Save Changes\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FormModal\r\n"]},"metadata":{},"sourceType":"module"}